#!/usr/bin/env node

var _ = require('underscore');
var program = require('commander');
var jr = require('../');

program
  .version('0.2.0')
  .usage('[options] <jobs>')
  .option('-l, --list', 'List jobs')
  .option('-t, --trace', 'Log trace messages')
  .parse(process.argv);

function spaces(n) {
  if (n > 1) {
    return new Array(n).join(' ');
  } else {
    return '';
  }
}

if (program.list) {
  jr.load({}, function(err, result) {
    if (err) {
      console.log('[jr] ' + err);
    } else {
      var jobs = result.jobs;
      var jobNames = _.keys(jobs).sort();
      var maxLength = _.max(_.map(jobNames, function (jobName) {
        return jobName.length;
      }));
      console.log();
      console.log('Job:' + spaces(maxLength) + '  Needs:');
      _.each(jobNames, function (jobName) {
        var needs = jobs[jobName].needs;
        if (needs) {
          console.log('  ' + jobName + spaces(maxLength - jobName.length) + '    ' + needs.join(', '));
        } else {
          console.log('  ' + jobName);
        }
      });
      console.log();
    }
  });
}

var beforeJob = null;
var afterJob = null;
if (program.trace) {
  beforeJob = function(cb, jobName) {
    console.log('[jr] Running job: ' + jobName);
    cb();
  };
  afterJob = function(cb, jobName) {
    console.log('[jr] Finished job: ' + jobName);
    cb();
  };
}

jr.run({
  jobNames: program.args,
  beforeJob: beforeJob,
  afterJob: afterJob
}, function (err) {
  if (err) {
    console.log('[jr] ' + err);
  }
});