#!/usr/bin/env node

const startTime = Date.now();

const jr = require('../');
const path = require('path');
const program = require('commander');

const logger = jr.makeLogger('jr');

program
  .version('0.5.0')
  .usage('[options] <jobs ...>')
  .option('-f, --file [path]', 'jobs file')
  .option('-l, --list', 'list jobs')
  .option('-t, --trace', 'log trace messages')
  .parse(process.argv);

function spaces(n) {
  if (n > 0) {
    return new Array(n).join(' ');
  } else {
    return '';
  }
}

const jobsFilePath = path.resolve(process.cwd(), program.file || 'jobs.js');

if (program.list) {
  const jobDefs = jr.load(jobsFilePath);
  const jobNames = Object.keys(jobDefs).sort();
  let maxJobNameLength = 0;
  jobNames.forEach((jobName) => {
    if (jobName.length > maxJobNameLength) {
      maxJobNameLength = jobName.length;
    }
  })
  console.log();
  console.log(`Job:${spaces(maxJobNameLength)}  Needs:`);
  console.log(`====${spaces(maxJobNameLength)}  ======`);
  jobNames.forEach((jobName) => {
    const needs = jobDefs[jobName].needs;
    console.log(`${jobName}${spaces(maxJobNameLength+2 - jobName.length)}    ${needs ? needs.join(', ') : '-'}`);
  });
  console.log();
}

if (program.args && program.args.length > 0) {
  let beforeJob;
  let afterJob;
  if (program.trace) {
    beforeJob = (jobName) => {
      logger.info(`Starting ${jobName}`);
    };
    afterJob = (jobName, time) => {
      logger.info(`Finished ${jobName} after ${time} ms`);
    };
  }
  try {
    jr.run(jobsFilePath, program.args, { beforeJob, afterJob })
      .then(() => {
        logger.log(`Done after ${Date.now() - startTime} ms`);
      })
      .catch((err) => {
        logger.error(`Done after ${Date.now() - startTime} ms, with ${err}`);
        process.exitCode = 1;
      });
  } catch (err) {
    logger.error(`${err}`);
    process.exitCode = 1;
  }
}
